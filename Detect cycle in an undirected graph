class Solution {
  public:
   bool dfs(int i , int parent , vector<int> adj[] , int vis[])
   {
       vis[i] = 1;
       for(auto it : adj[i])
       {
           if(!vis[it])
           {
               if(dfs(it , i , adj , vis) == true) return true;
           }
           else
           {
               if(parent != it) return true;
           }
       }
       return false;
   }
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        // Code here
        int vis[V] = {0};
        for(int i=0 ; i<V ; i++)
        {
            if(!vis[i])
            {
                if(dfs(i, -1 , adj , vis) == true) return true;
            }
        }
        return false;
    }
};
